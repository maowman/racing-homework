# image based on ubuntu 20.04
FROM ubuntu:20.04

# docker specific tweaks, see
# https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap#L85-L105
RUN echo 'DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' > /etc/apt/apt.conf.d/docker-clean \
    && echo 'APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' >> /etc/apt/apt.conf.d/docker-clean \
    && echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";' >> /etc/apt/apt.conf.d/docker-clean

# update package repository information and install with no prompt
# bash-completion -> bash auto-complete
# build-essential -> compiler
# byobu -> terminal multiplexer
# ca-certificates -> certificate manager
# curl -> internet commuincation library
# feh -> image viewer
# git -> version control
# gnupg2 -> encryption
# keyboard-configuration -> keyboard configuration
# lsb-release -> linux standard base
# net-tools -> network configurator
# python3-pip -> python package manager
# swig -> wrapper for C/C++ to connect to scripting language
# tmux -> terminal multiplexer
# tzdata -> timezone
# vim -> command line text editor
# wget -> downloader
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    bash-completion \
    build-essential \
    byobu \
    ca-certificates \
    curl \
    feh \
    git \
    gnupg2 \
    keyboard-configuration \
    lsb-release \
    net-tools \
    python3-pip \
    swig \
    tmux \
    tzdata \
    vim \
    wget \
    && apt-get clean && apt-get autoremove

# configure timezone to taipei
RUN TZ=Asia/Taipei \
    && ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime \
    && echo ${TZ} > /etc/timezone \
    && dpkg-reconfigure -f noninteractive tzdata

# add apt key for installing ros
# python3-rosdep -> ros dependencies manager
# python3-rosinstall -> ros installation tool
# python3-rosinstall-generator -> ros install file generator
# python3-wstool -> ros version control
# ros-noetic-desktop-full -> ros
# ros-noetic-teleop-twist-keyboard -> ros keyboard control
# ros-noetic-rqt-multiplot -> ros multi-plotting tool
# ros-noetic-socketcan-bridge -> ros can tool
# initialize ros python environment as root
RUN bash -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' \
    && curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - \
    && apt-get update && apt-get install -y \
    python3-rosdep \
    python3-rosinstall \
    python3-rosinstall-generator \
    python3-wstool \
    ros-noetic-desktop-full \
    ros-noetic-teleop-twist-keyboard \
    ros-noetic-rqt-multiplot \
    ros-noetic-socketcan-bridge \
    && apt-get clean && apt-get autoremove \
    && rosdep init

# adding user "docker" on host
# password "docker" for user 'root' and 'docker'
RUN useradd --create-home --shell /bin/bash docker \
    && usermod -aG sudo docker \
    && echo 'docker\ndocker' | passwd \
    && echo 'docker\ndocker' | passwd docker

# change to user "docker" and change to home directory
USER docker
WORKDIR /home/docker

# update python enviroment in non-user directory
# prebuild ws once, using bash warpper for avoiding wierd problems
RUN rosdep update \
    && bash -c 'source /opt/ros/noetic/setup.bash && mkdir -p ws/src && cd ws && catkin_make'

# copy .bashrc for executing it everytime attaching to the container and modify it to
# export PATH=:${PATH}:~/.local/bin -> add local(user specific) python library path to PATH environment variable
# source /opt/ros/noetic/setup.bash -> source ros
# source ~/ws/devel/setup.bash -> source ros workspace "ws"
RUN cp /etc/skel/.bashrc /home/docker \
    && echo 'export PATH=:${PATH}:~/.local/bin' >> ~/.bashrc \
    && echo 'source /opt/ros/noetic/setup.bash' >> ~/.bashrc \
    && echo 'source ~/ws/devel/setup.bash' >> ~/.bashrc
